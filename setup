#!/usr/bin/env bash

TMP_FILE_PREFIX=${TMPDIR:-/tmp}/prog.$$
GOLANG_VERSION="1.12.5"
PYTHON_VERSION="3.6.6"

DEFAULT_APT_PACKAGES="
apt-utils
build-essential
curl
git
jq
wget
vim
i3
arandr
fonts-font-awesome
font-manager
pkg-config
libasound2-dev
libdrumstick-dev
libavcodec-extra
rxvt
tmux
chromium
brave-browser
firefox
"

function usage() {
  echo "Usage: init [OPTION]
  -f          full (install everything)
  -m          minimal install (just vim)
  "
}

function _has() {
  if $(type -t "$1" &> /dev/null); then 
    return 0 
  fi 
  return 1
}

function install_apt_packages() {
  echo "Installing apt packages"
  for apt_pkg in $@; do
    if ! $(dpkg -s $apt_pkg &> /dev/null); then
      echo "Installing $apt_pkg"
      sudo DEBIAN_FRONTEND=noninteractive apt-get install -qq -y $apt_pkg
    fi
  done

  if [ ! -f /etc/profile.d/vte.sh ]; then
    sudo ln -s /etc/profile.d/vte-2.91.sh /etc/profile.d/vte.sh
  fi
}

function install_vim_plugins() {
   if ! $(dpkg -s vim &> /dev/null); then
      sudo DEBIAN_FRONTEND=noninteractive apt-get install --qq -y vim 
   fi
   ./install-vim-plugins
}

function install_node() {
  echo "Installing Node"
  if [ -f $HOME/.nvm/nvm.sh ]; then
    source $HOME/.nvm/nvm.sh
  else
    mkdir $HOME/.nvm
    # Install the latest version of NVM
    LATEST_NVM=$(curl -s  https://api.github.com/repositories/612230/releases/latest | jq -r '.tag_name')
    echo "https://raw.githubusercontent.com/creationix/nvm/$LATEST_NVM/install.sh"
    curl -LSs https://raw.githubusercontent.com/creationix/nvm/$LATEST_NVM/install.sh | bash # Add NVM to bash_local so it'll work in the shell
    echo 'export NVM_DIR="$HOME/.nvm"' >> ~/.bash_local
    echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> ~/.bash_local
    # load NVM so we can use it to install node
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
  fi

  if _has nvm && ! _has node; then
    nvm install --lts
  fi

  if _has npm && ! _has yarn; then
    npm install -g yarn
  fi
}

function install_golang() {
  if [ ! -d "$HOME/.go" ] && [ ! -d "$HOME/code" ]; then
    wget -q "https://storage.googleapis.com/golang/go${GOLANG_VERSION}.linux-amd64.tar.gz" -O /tmp/go.tar.gz
    tar -C "$HOME" -xzf /tmp/go.tar.gz
    mv "$HOME/go" "$HOME/.go"
    {
      echo '# GoLang'
      echo 'export GOROOT=$HOME/code'
      echo 'export PATH=$PATH:$GOROOT/bin'
      echo 'export GOPATH=$HOME/code'
      echo 'export PATH=$PATH:$GOPATH/bin'
    } >> "$HOME/.bash_local"
    mkdir -p $HOME/code/{src,pkg,bin}
    rm -f /tmp/go.tar.gz
  fi
}

function install_python() {
  if ! _has pyenv; then
    install_apt_packages "libreadline-dev libssl-dev libbz2-dev zlib1g-dev"
    curl -LSs https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash
    {
      echo 'export PATH="$HOME/.pyenv/bin:$PATH"'
      echo 'eval "$(pyenv init -)"'
      echo 'eval "$(pyenv virtualenv-init -)"'
    } >> "$HOME/.bash_local"

    export PATH="$HOME/.pyenv/bin:$PATH"
    eval "$(pyenv init -)"
    eval "$(pyenv virtualenv-init -)"

    pyenv install 3.6.6 && pyenv global 3.6.6
  fi

  if _has pip && ! _has http; then
    pip install httpie httpie-jwt-auth
  fi
}

function install_dotfiles() {
  if [ ! -d "$HOME/.homesick/repos/homeshick" ]; then 
    git clone --depth=1 https://github.com/andsens/homeshick.git $HOME/.homesick/repos/homeshick
    echo 'source $HOME/.homesick/repos/homeshick/homeshick.sh' >> ~/.bash_local
    source $HOME/.homesick/repos/homeshick/homeshick.sh
    yes | homeshick clone -b evcraddock/dotfiles
    yes | homeshick link /dotfiles
  fi
}

function install_uiapps() {
  install_apt_packages "i3 pavucontrol scrot xclip vim-gnome fonts-powerline"

  # For the nvidia 1070, we need 390
  if [[ $(ubuntu-drivers devices | grep -q nvidia-driver) -eq 0 ]]; then
    if [[ $(dpkg -s nvidia-driver-390 &> /dev/null) -ne 0 ]]; then
      sudo add-apt-repository -y ppa:graphics-drivers/ppa
      sudo apt-get update
      sudo apt-get install -y nvidia-driver-390
    fi
  fi
}

function install_vscode() {
  if ! _has code; then
   # set up the microsoft repo
   # curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
   # sudo mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg
   # sudo sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main" > /etc/apt/sources.list.d/vscode.list'

    wget -qO - https://gitlab.com/paulcarroty/vscodium-deb-rpm-repo/raw/master/pub.gpg | sudo apt-key add -
    sudo apt-add-repository 'deb https://gitlab.com/paulcarroty/vscodium-deb-rpm-repo/raw/repos/debs/ vscodium main'

    # install code
    sudo apt-get update
    sudo apt-get install -y codium

    # install all the extensions
    VSCODE_EXTENSIONS="
    PeterJausovec.vscode-docker
    ms-vscode.Go
    christian-kohler.path-intellisense
    dbaeumer.vscode-eslint
    EditorConfig.EditorConfig
    ms-vscode.vscode-typescript-tslint-plugin
    esbenp.prettier-vscode
    mikestead.dotenv
    vscodevim.vim
    shd101wyy.markdown-preview-enhanced
    "
    for ext in $VSCODE_EXTENSIONS; do
      code --install-extension $ext
    done
  fi
}

function install_docker() {
  if ! _has docker; then
    curl -o- https://get.docker.com | bash
    sudo usermod -aG docker $(whoami)
  fi
}

function install_rust() {
  if ! _has rust; then
     curl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | bash   
  fi
}

function install_devtools() {
  # grab httpie if we didnt install python
  if [[ ! $PACKAGES = *"python"* ]]; then
    install_apt_packages "httpie"
  fi

  # gcloud cli
  if ! _has gcloud; then
    source /etc/lsb-release
    export CLOUD_SDK_REPO="cloud-sdk-${DISTRIB_CODENAME}"
    echo "deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
    curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
    sudo apt-get update && sudo apt-get install -y google-cloud-sdk
  fi

  # kubectl cli
  if ! _has kubectl; then
    curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
    chmod +x ./kubectl
    sudo mv ./kubectl /usr/local/bin/kubectl

    # kubectl shell autocompletion
    echo "source <(kubectl completion bash)" >> ~/.bash_local
    # the k alias
    echo "alias k='kubectl'" >> ~/.bash_local
  fi
}

function main() {
  PACKAGES="node golang rust python dotfiles devtools"
  local -r OPTS=':hfm'
  while builtin getopts ${OPTS} opt "${@}"; do

    case $opt in
      h) usage ; exit 0
        ;;

      f) # 
        PACKAGES="${PACKAGES} uiapps docker vscode"
        ;;

      m) # minimal
        PACKAGES=""
        ;;


      \?)
        echo ${opt} ${OPTIND} 'is an invalid option' >&2;
        usage;
        exit ${INVALID_OPTION}
        ;;
    esac
  done

  # update apt packages
  sudo apt-get update -q

  # upgrade everything (no balls)
  sudo apt-get upgrade -y

  install_apt_packages "${DEFAULT_APT_PACKAGES}"

  for pkg in ${PACKAGES}; do
    if _has "install_$pkg"; then
      install_$pkg
    fi
  done

  install_vim_plugins "${DEFAULT_VIM_PLUGINS}"
  install_dotfiles

  ./install-statusbar

  exit 0
}


main "$@"

echo "---------------------------------------------------"
echo "All finished. You'll want to source your bashrc."
echo "$ source ~/.bashrc"

